CCS PCH C Compiler, Version 5.090, 13314               01-dic.-20 12:27

               Filename:   C:\Users\Martin Hdez\Desktop\18F45K50\Práctica 15 – Servomotor\Servomotor.lst

               ROM used:   452 bytes (1%)
                           Largest free fragment is 24120
               RAM used:   30 (1%) at main() level
                           31 (2%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
2000:  GOTO   211C
*
2008:  MOVWF  04
200A:  MOVFF  FD8,05
200E:  MOVFF  FE0,06
2012:  MOVLB  0
2014:  MOVFF  FE9,0C
2018:  MOVFF  FEA,07
201C:  MOVFF  FE1,08
2020:  MOVFF  FE2,09
2024:  MOVFF  FD9,0A
2028:  MOVFF  FDA,0B
202C:  MOVFF  FF3,12
2030:  MOVFF  FF4,13
2034:  MOVFF  FFA,14
2038:  MOVFF  FF5,15
203C:  MOVFF  FF6,16
2040:  MOVFF  FF7,17
2044:  MOVFF  00,0E
2048:  MOVFF  01,0F
204C:  MOVFF  02,10
2050:  MOVFF  03,11
2054:  BTFSS  FF2.5
2056:  GOTO   2060
205A:  BTFSC  FF2.2
205C:  GOTO   20AE
2060:  MOVFF  0E,00
2064:  MOVFF  0F,01
2068:  MOVFF  10,02
206C:  MOVFF  11,03
2070:  MOVFF  0C,FE9
2074:  MOVFF  07,FEA
2078:  BSF    07.7
207A:  MOVFF  08,FE1
207E:  MOVFF  09,FE2
2082:  MOVFF  0A,FD9
2086:  MOVFF  0B,FDA
208A:  MOVFF  12,FF3
208E:  MOVFF  13,FF4
2092:  MOVFF  14,FFA
2096:  MOVFF  15,FF5
209A:  MOVFF  16,FF6
209E:  MOVFF  17,FF7
20A2:  MOVF   04,W
20A4:  MOVFF  06,FE0
20A8:  MOVFF  05,FD8
20AC:  RETFIE 0
.................... /*
.................... AUTOR: MICROSIDE TECHNOLOGY S.A. DE C.V.
.................... FECHA: JUNIO 2019
.................... */
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Controlar la posicíon de un servo por medio del módulo PWM interno
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <18F45K50.h>                    // Para PIC18F4550 cambiar por: #include <18F4550.h>
.................... //////////// Standard Header file for the PIC18F45K50 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F45K50
.................... 
.................... #list
.................... 
.................... #use delay(internal=48MHz)               // Tipo de oscilador y frecuencia dependiendo del microcontrolador 
*
20D4:  MOVLW  01
20D6:  SUBWF  1E,F
20D8:  BNC   20F2
20DA:  CLRF   FEA
20DC:  MOVLW  1E
20DE:  MOVWF  FE9
20E0:  MOVF   FEF,W
20E2:  BZ    20F2
20E4:  MOVLW  02
20E6:  MOVWF  00
20E8:  DECFSZ 00,F
20EA:  BRA    20E8
20EC:  BRA    20EE
20EE:  DECFSZ FEF,F
20F0:  BRA    20E4
20F2:  RETURN 0
20F4:  CLRF   FEA
20F6:  MOVLW  1D
20F8:  MOVWF  FE9
20FA:  MOVF   FEF,W
20FC:  BZ    211A
20FE:  MOVLW  0F
2100:  MOVWF  01
2102:  CLRF   00
2104:  DECFSZ 00,F
2106:  BRA    2104
2108:  DECFSZ 01,F
210A:  BRA    2102
210C:  MOVLW  8F
210E:  MOVWF  00
2110:  DECFSZ 00,F
2112:  BRA    2110
2114:  NOP   
2116:  DECFSZ FEF,F
2118:  BRA    20FE
211A:  RETURN 0
.................... #build(reset=0x02000,interrupt=0x02008)  // Asigna los vectores de reset e interrupción para la versión con bootloader
.................... #org 0x0000,0x1FFF {}                    // Reserva espacio en memoria para el bootloader
.................... 
.................... int16 DUTY;                              //variable para ajustar el valor del PWM
.................... int1 SUBE;
.................... int i;
.................... 
.................... void SisInit()
.................... {
....................   set_tris_c(0xFB);                      // C2 salida
*
20C2:  MOVLW  FB
20C4:  MOVWF  F94
....................   setup_timer_0(T0_INTERNAL|T0_DIV_4);
20C6:  MOVLW  81
20C8:  MOVWF  FD5
....................   enable_interrupts(INT_TIMER0);
20CA:  BSF    FF2.5
....................   enable_interrupts(GLOBAL);
20CC:  MOVLW  C0
20CE:  IORWF  FF2,F
20D0:  GOTO   2140 (RETURN)
.................... 
.................... }
.................... 
.................... #int_TIMER0
.................... 
....................  
.................... void TIMER0_isr(){
.................... output_high(PIN_C2);                    //Salida Pin_C2
*
20AE:  BCF    F94.2
20B0:  BSF    F8B.2
.................... SUBE=1;
20B2:  BSF    1B.0
.................... set_timer0(5780);                      
20B4:  MOVLW  16
20B6:  MOVWF  FD7
20B8:  MOVLW  94
20BA:  MOVWF  FD6
20BC:  BCF    FF2.2
20BE:  GOTO   2060
.................... }
.................... 
.................... void main()
*
211C:  CLRF   FF8
211E:  BCF    FD0.7
2120:  BSF    07.7
2122:  MOVLW  70
2124:  MOVWF  FD3
2126:  CLRF   FD2
2128:  CLRF   F9B
212A:  MOVLB  F
212C:  CLRF   x5B
212E:  CLRF   x5C
2130:  CLRF   x5D
2132:  CLRF   x5E
2134:  CLRF   x5F
2136:  CLRF   F9A
2138:  CLRF   F99
213A:  CLRF   F98
.................... {
....................         SisInit();
213C:  MOVLB  0
213E:  BRA    20C2
....................         while(1)
....................               {
.................... 
....................                     for(i=0;i<255;i++)
2140:  CLRF   1C
2142:  INCFSZ 1C,W
2144:  BRA    2148
2146:  BRA    2168
....................                          {
....................                              if(SUBE==1)
2148:  BTFSS  1B.0
214A:  BRA    2160
....................                              {
....................                                 delay_us(500);        //0°
214C:  MOVLW  02
214E:  MOVWF  1D
2150:  MOVLW  FA
2152:  MOVWF  1E
2154:  RCALL  20D4
2156:  DECFSZ 1D,F
2158:  BRA    2150
....................                                  output_low( PIN_C2);
215A:  BCF    F94.2
215C:  BCF    F8B.2
....................                                  SUBE=0;
215E:  BCF    1B.0
....................                               }
....................                                 while(SUBE==0);
2160:  BTFSS  1B.0
2162:  BRA    2160
2164:  INCF   1C,F
2166:  BRA    2142
....................                             }
.................... 
....................                       for(i=0;i<255;i++)
2168:  CLRF   1C
216A:  INCFSZ 1C,W
216C:  BRA    2170
216E:  BRA    2196
....................                            {
....................                               if(SUBE==1)
2170:  BTFSS  1B.0
2172:  BRA    218E
....................                                {
....................                                   delay_us(1500);     //90°
2174:  MOVLW  01
2176:  MOVWF  1D
2178:  RCALL  20F4
217A:  MOVLW  02
217C:  MOVWF  1D
217E:  MOVLW  FA
2180:  MOVWF  1E
2182:  RCALL  20D4
2184:  DECFSZ 1D,F
2186:  BRA    217E
....................                                    output_low( PIN_C2);
2188:  BCF    F94.2
218A:  BCF    F8B.2
....................                                    SUBE=0;
218C:  BCF    1B.0
....................                                 }
....................                                 while(SUBE==0);
218E:  BTFSS  1B.0
2190:  BRA    218E
2192:  INCF   1C,F
2194:  BRA    216A
....................                           } 
.................... 
....................                         for(i=0;i<255;i++)
2196:  CLRF   1C
2198:  INCFSZ 1C,W
219A:  BRA    219E
219C:  BRA    21C4
....................                                {
....................                                   if(SUBE==1)
219E:  BTFSS  1B.0
21A0:  BRA    21BC
....................                                   {
....................                                       delay_us(2500); //180°
21A2:  MOVLW  02
21A4:  MOVWF  1D
21A6:  RCALL  20F4
21A8:  MOVLW  02
21AA:  MOVWF  1D
21AC:  MOVLW  FA
21AE:  MOVWF  1E
21B0:  RCALL  20D4
21B2:  DECFSZ 1D,F
21B4:  BRA    21AC
....................                                       output_low( PIN_C2);
21B6:  BCF    F94.2
21B8:  BCF    F8B.2
....................                                        SUBE=0;
21BA:  BCF    1B.0
....................                                    }
....................                                   while(SUBE==0);
21BC:  BTFSS  1B.0
21BE:  BRA    21BC
21C0:  INCF   1C,F
21C2:  BRA    2198
....................                                     }
21C4:  BRA    2140
.................... 
....................                  }
.................... }
21C6:  SLEEP 

Configuration Fuses:
   Word  1: C823   PLL3X PLLEN NOCPUDIV LS48MHZ INTRC_IO PRIMARY_SW FCMEN IESO
   Word  2: 3C5E   PUT BROWNOUT BORV19 NOLPBOR NOWDT WDT32768
   Word  3: D300   CCP2C1 PBADEN T3CKC0 SDOB3 MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
